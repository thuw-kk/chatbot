from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import requests

app = Flask(__name__)
CORS(app)

# ======= Load Excel with multiple sheets =======
sheets = pd.read_excel("products.xlsx", sheet_name=None)

df_products = sheets.get("Sanpham")
df_promo = sheets.get("Khuyenmai")
df_contact = sheets.get("Lienhe")
df_faq = sheets.get("Hoidap")

# ======= AI Config (OpenRouter API) =======
OPENROUTER_API_KEY = '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'

def ai_generate_reply(message):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://your-site.com",
        "X-Title": "Chatbot Assistant"
    }
    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán."},
            {"role": "user", "content": message}
        ]
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        result = response.json()
        if "choices" in result:
            return result['choices'][0]['message']['content']
        else:
            return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n."
    except Exception as e:
        return "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi AI."

# ======= C√°c h√†m x·ª≠ l√Ω =========
def top_selling(df):
    if "S·ªë l∆∞·ª£t b√°n" not in df.columns:
        return "D·ªØ li·ªáu l∆∞·ª£t b√°n ch∆∞a c√≥."
    top = df.sort_values(by="S·ªë l∆∞·ª£t b√°n", ascending=False).head(3)
    return "Top s·∫£n ph·∫©m b√°n ch·∫°y:\n" + "\n".join(
        f"- {row['T√™n s·∫£n ph·∫©m']} ({int(row['S·ªë l∆∞·ª£t b√°n'])} l∆∞·ª£t)" for _, row in top.iterrows()
    )

def current_promos(df_promo):
    if df_promo is None or df_promo.empty:
        return "Hi·ªán ch∆∞a c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o."
    lines = []
    for _, row in df_promo.iterrows():
        lines.append(f"üéÅ {row['TenChuongTrinh']}: {row['MoTa']} (√Åp d·ª•ng cho: {row['SanPhamApDung']})")
    return "C√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán c√≥:\n" + "\n".join(lines)

def promo_for_product(df_promo, message):
    for _, row in df_promo.iterrows():
        if str(row['SanPhamApDung']).lower() in message:
            return f"üéâ S·∫£n ph·∫©m b·∫°n quan t√¢m ƒëang n·∫±m trong ch∆∞∆°ng tr√¨nh: {row['TenChuongTrinh']} - Gi·∫£m {row['MucGiam']} ({row['MoTa']})"
    return None

def suggest_by_category(df, message):
    if "Danh m·ª•c" not in df.columns:
        return None
    for cat in df["Danh m·ª•c"].dropna().unique():
        if str(cat).lower() in message:
            g = df[df["Danh m·ª•c"].str.lower() == cat.lower()]
            g = g.sort_values(by="S·ªë l∆∞·ª£t b√°n", ascending=False).head(3)
            return f"G·ª£i √Ω {cat}:\n" + "\n".join(f"- {r['T√™n s·∫£n ph·∫©m']} ({r['Gi√°']} VND)" for _, r in g.iterrows())
    return None

def detailed_product_info(df, message):
    for _, row in df.iterrows():
        ten_sp = str(row['T√™n s·∫£n ph·∫©m']).lower()
        if ten_sp in message:
            result = [f"S·∫£n ph·∫©m: {row['T√™n s·∫£n ph·∫©m']}"]
            if "gi√°" in message:
                result.append(f"Gi√°: {row['Gi√°']} VND")
            if "m√†u" in message:
                result.append(f"M√†u: {row.get('M√†u', 'Kh√¥ng r√µ')}")
            if "size" in message or "k√≠ch c·ª°" in message:
                result.append(f"Size: {row.get('Size', 'Kh√¥ng r√µ')}")
            if "s·ªë l∆∞·ª£ng" in message:
                result.append(f"S·ªë l∆∞·ª£ng c√≤n: {row.get('S·ªë l∆∞·ª£ng', 'Kh√¥ng r√µ')}")
            if len(result) == 1:
                result.append(f"Gi√°: {row['Gi√°']} VND")
                result.append(f"M√†u: {row.get('M√†u', 'Kh√¥ng r√µ')}")
                result.append(f"Size: {row.get('Size', 'Kh√¥ng r√µ')}")
                result.append(f"S·ªë l∆∞·ª£ng c√≤n: {row.get('S·ªë l∆∞·ª£ng', 'Kh√¥ng r√µ')}")
            return "\n".join(result)
    return None

def faq_response(df_faq, message):
    if df_faq is None:
        return None
    for _, row in df_faq.iterrows():
        if str(row['CauHoiThuongGap']).lower() in message:
            return row['TraLoi']
    return None

def contact_info(df_contact, message):
    keywords = ['li√™n h·ªá', 's·ªë ƒëi·ªán tho·∫°i', 'email', 'h·ªó tr·ª£', 'ƒë·ªãa ch·ªâ']
    if any(k in message for k in keywords):
        contact_lines = []
        for _, row in df_contact.iterrows():
            thongtin = str(row.get("ThongTin", ""))
            noidung = str(row.get("NoiDung", ""))
            contact_lines.append(f"{thongtin}: {noidung}")
        return "Th√¥ng tin li√™n h·ªá:\n" + "\n".join(contact_lines)
    return None

# ======= Flask Route =======
@app.route("/chat", methods=["POST"])
def chat():
    message = request.json.get("message", "").lower()

    if "b√°n ch·∫°y" in message:
        return jsonify({"reply": top_selling(df_products)})

    if "khuy·∫øn m√£i" in message or "gi·∫£m gi√°" in message:
        reply = promo_for_product(df_promo, message)
        if reply:
            return jsonify({"reply": reply})
        return jsonify({"reply": current_promos(df_promo)})

    # ∆Øu ti√™n t√¨m th√¥ng tin s·∫£n ph·∫©m c·ª• th·ªÉ (gi√°, m√†u, size,...)
    info = detailed_product_info(df_products, message)
    if info:
        return jsonify({"reply": info})

    suggestion = suggest_by_category(df_products, message)
    if suggestion:
        return jsonify({"reply": suggestion})

    faq = faq_response(df_faq, message)
    if faq:
        return jsonify({"reply": faq})

    contact = contact_info(df_contact, message)
    if contact:
        return jsonify({"reply": contact})

    return jsonify({"reply": ai_generate_reply(message)})

# ======= Start server =======
if __name__ == "__main__":
    app.run(debug=True)